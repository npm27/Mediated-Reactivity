getwd()
####This script will be used to read in everything and set EX 2data up for processing####
##Start by gathering all of the data
#JOLs and frequency
setwd("C:/Users/nickm/OneDrive/Documents/GitHub/Mediated-Reactivity/3 Output/Ex 1 - Recall/USM/JOL")
files = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat$Username))
#read
setwd("C:/Users/nickm/OneDrive/Documents/GitHub/Mediated-Reactivity/3 Output/Ex 1 - Recall/USM/No-JOL")
files2 = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat2 = do.call(rbind, lapply(files2, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat2$Username))
#Now move back to the original folder
#This is where I'll store the combined final output for scoring
setwd('..')
View(dat)
####Clean up the data files####
##Drop unused columns
dat = dat[ , -c(2:4, 6:7, 9:10, 12, 20:23, 27:32, 34)]
dat2 = dat2[ , -c(2:4, 6:7, 9:10, 12, 20:23, 27:33)]
View(dat)
#Next, remove buffer trials
dat = subset(dat,
dat$Stimuli.Stimuli.Notes != "Buffer")
dat2 = subset(dat2,
dat2$Stimuli.Stimuli.Notes != "Buffer")
#Now remove instruction trials
dat = subset(dat,
dat$Procedure.Trial.Type != "Instruct")
dat2 = subset(dat2,
dat2$Procedure.Trial.Type != "Instruct")
#Now remove filler task
dat = subset(dat,
dat$Procedure.Trial.Type != "FreeRecall")
dat2 = subset(dat2,
dat2$Procedure.Trial.Type != "FreeRecall")
####Set the data up for scoring####
#Start by subsetting out the recall and JOL data for each dataset
dat.JOL = subset(dat,
dat$Procedure.Trial.Type == "JOL")
dat.Recall = subset(dat,
dat$Procedure.Trial.Type == "Test")
#get JOLs and Recall in the same order
dat.JOL = dat.JOL[order(dat.JOL$Stimuli.Cue), ]
dat.JOL = dat.JOL[order(dat.JOL$Condition.Number), ]
dat.JOL = dat.JOL[order(dat.JOL$Stimuli.Shuffle), ]
dat.Recall = dat.Recall[order(dat.Recall$Stimuli.Cue), ]
dat.Recall = dat.Recall[order(dat.Recall$Condition.Number), ]
dat.Recall = dat.Recall[order(dat.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat.R = dat.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
JOL = cbind(dat.JOL, dat.R)
JOL = JOL[ , -c(11, 13:14)]
JOL = JOL[ , -c(9:10)]
JOL = JOL[ , -2]
View(JOL)
##Now do the same for the study only condition
#Start by subsetting out the recall and study trials for each dataset
dat2.Study = subset(dat2,
dat2$Procedure.Trial.Type == "STUDY")
dat2.Recall = subset(dat2,
dat2$Procedure.Trial.Type == "Test")
##Now do the same for the study only condition
#Start by subsetting out the recall and study trials for each dataset
dat2.Study = subset(dat2,
dat2$Procedure.Trial.Type == "Study")
dat2.Recall = subset(dat2,
dat2$Procedure.Trial.Type == "Test")
#get Study and Recall in the same order
dat2.Study = dat2.Study[order(dat2.Study$Stimuli.Cue), ]
dat2.Study = dat2.Study[order(dat2.Study$Condition.Number), ]
dat2.Study = dat2.Study[order(dat2.Study$Stimuli.Shuffle), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Stimuli.Cue), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Condition.Number), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat2.R = dat2.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
Study = cbind(dat2.Study, dat2.R)
Study = Study[ , -c(11, 13:14)]
Study = Study[ , -c(9:10)]
Study = Study[ , -2]
####Score the recall data####
##Going to write everything to .csv and then use the old shiny app to score
#first lowercase everything
JOL$Stimuli.Cue = tolower(JOL$Stimuli.Cue)
JOL$Stimuli.Answer = tolower(JOL$Stimuli.Answer)
Study$Stimuli.Cue = tolower(Study$Stimuli.Cue)
Study$Stimuli.Answer = tolower(Study$Stimuli.Answer)
#JOL = read.csv("JOL_pre_scored.csv")
JOL$Response.Response = tolower(JOL$Response.Response)
#now write to .csv for scoring
length(unique(JOL$Username)) #118
length(unique(FREQ$Username)) #110
length(unique(Study$Username)) #115
write.csv(JOL[ , c(1, 12, 5, 2:4, 6:11)], file = "JOL_pre_scored.csv", row.names = F)
write.csv(Study[ , c(1, 11, 5, 2:4, 6:10)], file = "Study_pre_scored.csv", row.names = F)
write.csv(JOL[ , c(1, 12, 5, 2:4, 6:11)], file = "JOL_pre_scored.csv", row.names = F)
setwd("~/GitHub/Mediated-Reactivity/4 Analyses")
##read in data
JOL = read.csv("JOL Scored.csv")
Read = read.csv("Read Scored.csv")
View(JOL)
##drop unused columns
JOL2 = JOL[ , -c(2:4, 8:9, 11:14)]
View(Read)
Read2 = Read[ , -c(2:4, 8:9, 11:13)]
#slap together and rearrange columns
combined = rbind(JOL2, Read2)
View(combined)
combined = combined[ , c(1, 3, 4, 2)]
#load libraries
library(reshape)
library(ez)
#turn off scientific notation
options(scipen = 999)
View(combined)
##read in data
JOL = read.csv("JOL Scored.csv")
Read = read.csv("Read Scored.csv")
#load libraries
library(reshape)
library(ez)
#turn off scientific notation
options(scipen = 999)
View(JOL)
##drop unused columns
JOL2 = JOL[ , -c(2:4, 8:9, 11:14)]
View(JOL2)
Read2 = Read[ , -c(2:4, 8:9, 11:13)]
combined = combined[ , c(1, 3, 4, 5, 2)]
#slap together and rearrange columns
combined = rbind(JOL2, Read2)
combined = combined[ , c(1, 3, 4, 5, 2)]
#rename columns
colnames(combined)[4:5] = c("encoding", "direction")
View(combined)
##read in data
JOL = read.csv("JOL Scored.csv")
Read = read.csv("Read Scored.csv")
#load libraries
library(reshape)
library(ez)
#turn off scientific notation
options(scipen = 999)
##drop unused columns
JOL2 = JOL[ , -c(2:4, 8:9, 11:14)]
Read2 = Read[ , -c(2:4, 8:9, 11:13)]
#slap together and rearrange columns
combined = rbind(JOL2, Read2)
combined = combined[ , c(1, 3, 4, 5, 2)]
#rename columns
colnames(combined)[3:5] = c("encoding", "direction", "score")
#get score on correct scale
combined$score = combined$score * 100
tapply(combined$direction, combined$score)
tapply(combined$direction, combined$score, mean)
tapply(combined$direction, combined$score, mean, na.omit = T)
tapply(combined$score, list(combined$direction, combined$encoding), mean, na.omit = T)
tapply(combined$score, list(combined$encoding, combined$direction), mean, na.omit = T)
##read in data
JOL = read.csv("USM/JOL Scored.csv")
Read = read.csv("USM/Read Scored.csv")
##read in data
JOL = cbind(read.csv("USM/JOL Scored.csv"), read.csv("Prolific/JOL Scored_P.csv"))
##read in data
JOL = cbind(read.csv("USM/JOL Scored.csv"), read.csv("Prolific/JOL Scored_P.csv"))
##read in data
JOL = rbind(read.csv("USM/JOL Scored.csv"), read.csv("Prolific/JOL Scored_P.csv"))
Read = rbind(read.csv("USM/Read Scored.csv"), read.csv("Prolific/Read Scored_P.csv"))
##drop unused columns
JOL2 = JOL[ , -c(2:4, 8:9, 11:14)]
Read2 = Read[ , -c(2:4, 8:9, 11:13)]
#slap together and rearrange columns
combined = rbind(JOL2, Read2)
combined = combined[ , c(1, 3, 4, 5, 6, 2)]
View(combined)
#rename columns
colnames(combined)[c(3:4, 6)] = c("encoding", "direction", "score")
#get score on correct scale
combined$score = combined$score * 100
tapply(combined$score, list(combined$encoding, combined$direction), mean, na.omit = T)
#load libraries
library(reshape)
library(ez)
library(psychReport)
####ANOVA####
model1 = ezANOVA(combined,
dv = score,
between = direction,
within = encoding,
wid = id,
type = 3,
detailed = T)
##Check for outliers and weirdness here
summary(combined)
ezDesign(combined, x = encoding, y = direction)
ezDesign(combined, x = encoding, y = id)
####ANOVA####
model1 = ezANOVA(combined,
dv = score,
between = encoding,
within = direction,
wid = id,
type = 3,
detailed = T)
model1
#turn off scientific notation
options(scipen = 999)
####ANOVA####
model1 = ezANOVA(combined,
dv = score,
between = encoding,
within = direction,
wid = id,
type = 3,
detailed = T)
model1
####Post-hocs####
tapply(combined$score, combined$encoding, mean)
tapply(combiend$score, combined$direction, mean) #main effect of direction
tapply(combined$score, combined$direction, mean) #main effect of direction
tapply(combined$score, list(combined$encoding, combined$direction), mean)
###break down direction main effect
combined.direction = cast(combined, id ~ direction, mean)
View(combined.direction)
##get ns
length(unique(JOL$id))
length(unique(Read$id))
#F vs M
temp = t.test(combined.direction$F, combined.direction$M, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
#F vs U
temp = t.test(combined.direction$F, combined.direction$U, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
#U vs M
temp = t.test(combined.direction$M, combined.direction$U, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
###Interaction
jol3 = subset(combined, combined$encoding == "JOL")
View(JOL2)
read3 = subset(combined, combined$encoding == "Read")
read.ph = cast(read3, id ~ direction, mean)
jol.ph = cast(jol3, id ~ direction, mean)
##forward
temp = t.test(jol.ph$F, read.ph$F, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
##mediated
temp = t.test(jol.ph$M, read.ph$M, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
#unrelated
temp = t.test(jol.ph$U, read.ph$U, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
##read in data
JOL = rbind(read.csv("USM/JOL Scored.csv"), read.csv("Prolific/JOL Scored_P.csv"))
(read.csv("USM/JOL Scored.csv")
read.csv("USM/JOL Scored.csv")
read.csv("Prolific/JOL Scored_P.csv"
read.csv("Prolific/JOL Scored_P.csv")
##read in data
JOL = rbind(read.csv("USM/JOL Scored.csv"), read.csv("Prolific/JOL Scored_P.csv"))
Read = rbind(read.csv("USM/Read Scored.csv"), read.csv("Prolific/Read Scored_P.csv"))
#load libraries
library(reshape)
library(ez)
library(psychReport)
##get ns
length(unique(JOL$id)) #21
length(unique(Read$id)) #23
#turn off scientific notation
options(scipen = 999)
##drop unused columns
JOL2 = JOL[ , -c(2:4, 8:9, 11:14)]
Read2 = Read[ , -c(2:4, 8:9, 11:13)]
#slap together and rearrange columns
combined = rbind(JOL2, Read2)
combined = combined[ , c(1, 3, 4, 5, 6, 2)]
#rename columns
colnames(combined)[c(3:4, 6)] = c("encoding", "direction", "score")
#get score on correct scale
combined$score = combined$score * 100
tapply(combined$score, list(combined$encoding, combined$direction), mean, na.omit = T)
##Check for outliers and weirdness here
summary(combined)
tapply(combined$score, list(combined$encoding, combined$direction), mean, na.omit = T)
##Check for outliers and weirdness here
summary(combined)
####ANOVA####
model1 = ezANOVA(combined,
dv = score,
between = encoding,
within = direction,
wid = id,
type = 3,
detailed = T)
model1 #basically everything is sig!
####Post-hocs####
tapply(combined$score, combined$encoding, mean) #main effect of encoding
tapply(combined$score, combined$direction, mean) #main effect of direction
tapply(combined$score, list(combined$encoding, combined$direction), mean) #interaction
###break down direction main effect
combined.direction = cast(combined, id ~ direction, mean)
#F vs M
temp = t.test(combined.direction$F, combined.direction$M, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
round(temp$p.value, 3)
temp$statistic #sig!
(temp$conf.int[2] - temp$conf.int[1]) / 3.92
#F vs U
temp = t.test(combined.direction$F, combined.direction$U, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
round(temp$p.value, 3)
temp$statistic #sig!
(temp$conf.int[2] - temp$conf.int[1]) / 3.92
#U vs M
temp = t.test(combined.direction$M, combined.direction$U, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
round(temp$p.value, 3)
temp$statistic #sig!
(temp$conf.int[2] - temp$conf.int[1]) / 3.92
###Interaction
jol3 = subset(combined, combined$encoding == "JOL")
read3 = subset(combined, combined$encoding == "Read")
jol.ph = cast(jol3, id ~ direction, mean)
read.ph = cast(read3, id ~ direction, mean)
##forward
temp = t.test(jol.ph$F, read.ph$F, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
round(temp$p.value, 3)
temp$statistic #sig!
(temp$conf.int[2] - temp$conf.int[1]) / 3.92
##mediated
temp = t.test(jol.ph$M, read.ph$M, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
#unrelated
temp = t.test(jol.ph$U, read.ph$U, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
